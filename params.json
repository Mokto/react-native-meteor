{
  "name": "react-native-meteor",
  "tagline": "Meteor Reactivity for your React Native application :)",
  "body": "[![GitHub version](https://badge.fury.io/gh/inProgress-team%2Freact-native-meteor.svg)](https://badge.fury.io/gh/inProgress-team%2Freact-native-meteor)\r\n[![npm version](https://badge.fury.io/js/react-native-meteor.svg)](http://badge.fury.io/js/react-native-meteor)\r\n[![Dependency Status](https://david-dm.org/inProgress-team/react-native-meteor.svg)](https://david-dm.org/inProgress-team/react-native-meteor)\r\n[![devDependency Status](https://david-dm.org/inProgress-team/react-native-meteor/dev-status.svg)](https://david-dm.org/inProgress-team/react-native-meteor#info=devDependencies)\r\n[![MIT][license-badge]][license]\r\n[![bitHound Score][bithound-badge]][bithound]\r\n\r\n[bithound-badge]: https://www.bithound.io/github/inProgress-Team/react-native-meteor/badges/score.svg\r\n[bithound]: https://www.bithound.io/github/inProgress-Team/react-native-meteor\r\n[license-badge]: https://img.shields.io/dub/l/vibe-d.svg\r\n[license]: https://github.com/inProgress-team/react-native-meteor/blob/master/LICENSE\r\n\r\n# react-native-meteor\r\n\r\nMeteor-like methods for React Native. **Currently in v1.0.0-beta14** ! For old docs, see [v0.6.2 documentation](https://github.com/inProgress-team/react-native-meteor/tree/0.6.2) (classic ddp interface).\r\n\r\n## What is it for ?\r\n\r\nThe purpose of this library is :\r\n* to set up and maintain a ddp connection with a ddp server, freeing the developer from having to do it on their own.\r\n* be fully compatible with react-native and help react-native developers.\r\n* **to match with [Meteor documentation](http://docs.meteor.com/) used with React.**\r\n\r\n## Install\r\n\r\n    npm i --save react-native-meteor@latest\r\n\r\n[!! See detailed installation guide](https://github.com/inProgress-team/react-native-meteor/blob/master/docs/Install.md)\r\n\r\n## Example usage\r\n\r\n```javascript\r\n\r\nimport { View, Text, Component } from 'react-native';\r\nimport Meteor, { connectMeteor, MeteorListView } from 'react-native-meteor';\r\n\r\n/*\r\n* Uses decorators (see detailed installation to activate it)\r\n* Or use :\r\n\r\n  class Todos extends Component {\r\n    ...\r\n  }\r\n  connectMeteor(Todos);\r\n  export default Todos;\r\n\r\n*/\r\n\r\n@connectMeteor\r\nexport default class App extends Component {\r\n  componentWillMount() {\r\n    const url = 'http://192.168.X.X:3000/websocket';\r\n    Meteor.connect(url);\r\n  }\r\n  startMeteorSubscriptions() {\r\n    Meteor.subscribe('todos');\r\n    Meteor.subscribe('settings');\r\n  }\r\n  getMeteorData() {\r\n    return {\r\n      settings: Meteor.collection('settings').findOne()\r\n    };\r\n  }\r\n  renderRow(todo) {\r\n    return (\r\n      <Text>{todo.title}</Text>\r\n    );\r\n  }\r\n  render() {\r\n    const { settings } = this.data;\r\n\r\n    <View>\r\n      <Text>{settings.title}</Text>\r\n        <MeteorListView\r\n          collection=\"todos\"\r\n          selector={{done: true}}\r\n          options={{sort: {createdAt: -1}}}\r\n          renderRow={this.renderRow}\r\n        />\r\n    </View>\r\n\r\n  }\r\n}\r\n```\r\n\r\n# connectMeteor\r\n\r\n## startMeteorSubscriptions\r\n\r\nInside this method, you can create subscriptions (see below) when component is mounted. It will automatically unsubscribe if the component is unmounted.\r\n\r\n#### [Meteor.subscribe](http://docs.meteor.com/#/full/meteor_subscribe)\r\n##### Example usage\r\n\r\nyour server side:\r\n```javascript\r\nMeteor.publish('todos', function(done, options){\r\n    return Todos.find({ done: done }, options);\r\n});\r\n```\r\n\r\nyour react-native client code:\r\n```javascript\r\n//Meteor subscribe can be used like on meteor official site\r\nMeteor.subscribe('todos', true, {limit: 10, sort: {createdAt: -1}});\r\n```\r\n\r\n\r\n## getMeteorData\r\n\r\nInside getMeteorData, you can access any Meteor reactive data source, which means :\r\n\r\n* Meteor.collection(collectionName)\r\n  * [.find(selector, options)](http://docs.meteor.com/#/full/find)\r\n  * [.findOne(selector, options)](http://docs.meteor.com/#/full/findone)\r\n* [Meteor.user()](http://docs.meteor.com/#/full/meteor_user)\r\n* [Meteor.userId()](http://docs.meteor.com/#/full/meteor_userid)\r\n* [Meteor.status()](http://docs.meteor.com/#/full/meteor_status)\r\n* [Meteor.loggingIn()](http://docs.meteor.com/#/full/meteor_loggingin)\r\n\r\n# Additionals collection methods\r\n\r\n* Meteor.collection(collectionName)\r\n  * [.insert(doc, callback)](http://docs.meteor.com/#/full/insert)\r\n  * [.update(id, modifier, [options], [callback])](http://docs.meteor.com/#/full/update) (not implemented yet)\r\n  * [.upsert(id, modifier, [options], [callback])](http://docs.meteor.com/#/full/upsert) (not implemented yet)\r\n  * [.remove(id, callback(err, countRemoved))](http://docs.meteor.com/#/full/remove)\r\n\r\n# MeteorListView Component\r\n\r\nSame as [ListView](https://facebook.github.io/react-native/docs/listview.html) Component but does not need dataSource and accepts three arguments :\r\n\r\n- `collection` **string** *required*\r\n- `selector` [**string** / **object**]\r\n- `url` **object**\r\n\r\n### Example usage\r\n\r\n```javascript\r\n<MeteorListView\r\n  collection=\"todos\"\r\n  selector={{done: true}}\r\n  options={{sort: {createdAt: -1}}}\r\n  renderItem={this.renderItem}\r\n/>\r\n```\r\n\r\n# API\r\n\r\n## Meteor.connect(endpoint, options)\r\n\r\nConnect to a DDP server. You only have to do this once in your app.\r\n\r\n#### Arguments\r\n\r\n- `url` **string** *required*\r\n- `options` **object** Available options are :\r\n  - autoConnect **boolean** [true] whether to establish the connection to the server upon instantiation. When false, one can manually establish the connection with the Meteor.ddp.connect method.\r\n  - autoReconnect **boolean** [true] whether to try to reconnect to the server when the socket connection closes, unless the closing was initiated by a call to the disconnect method.\r\n  - reconnectInterval **number** [10000] the interval in ms between reconnection attempts.\r\n\r\n## Meteor.disconnect()\r\n\r\nDisconnect from the DDP server.\r\n\r\n## Meteor methods\r\n\r\n* [Meteor.loginWithPassword](http://docs.meteor.com/#/full/meteor_loginwithpassword) (Please note that user is auto-resigned in - like in Meteor Web applications - thanks to React Native AsyncStorage.)\r\n* [Meteor.logout](http://docs.meteor.com/#/full/meteor_logout)\r\n* [Meteor.call](http://docs.meteor.com/#/full/meteor_call)\r\n\r\n## Meteor.Accounts\r\n\r\n* [Accounts.createUser](http://docs.meteor.com/#/full/accounts_createuser)\r\n\r\n## Meteor.ddp\r\n\r\nOnce connected to the ddp server, you can access every method available in [ddp.js](https://github.com/mondora/ddp.js/).\r\n* Meteor.ddp.on('connected')\r\n* Meteor.ddp.on('added')\r\n* Meteor.ddp.on('changed')\r\n* ...\r\n\r\n# TODO\r\n\r\n- [ ] [Helper for Meteor-CollectionFS](https://github.com/inProgress-team/react-native-meteor/issues/18)\r\n- [ ] [Connection status unreliable](https://github.com/inProgress-team/react-native-meteor/issues/16)\r\n\r\nPull Requests are welcome ! :)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}